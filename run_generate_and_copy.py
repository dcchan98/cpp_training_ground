#!/usr/bin/env python3
import os
import re
from pathlib import Path

# --- CONFIG ---
ROOT = Path(__file__).parent
SRC_DIRS = [ROOT / "cp_util", ROOT / "include"]
MAIN_FILE = ROOT / "main.cpp"
OUTPUT_FILE = ROOT / "bin" / "combined.cpp"
# --------------

INCLUDE_PATTERN = re.compile(r'#\s*include\s*[<"].*[>"]')

def clean_code(code: str) -> str:
    cleaned_lines = []
    for line in code.splitlines():
        stripped = line.strip()
        # Removal of pragma once
        if stripped.startswith("#pragma once"):
            continue
        # Remove all #include lines except '#include <bits/stdc++.h>'
        if stripped.startswith("#include"):
            if "<bits/stdc++.h>" not in line:
                continue  # skip non-bits includes
        cleaned_lines.append(line)
    return "\n".join(cleaned_lines)

def gather_headers(dirs):
    headers = []
    for d in dirs:
        for path in sorted(d.glob("**/*.hpp")):
            with open(path, "r", encoding="utf-8") as f:
                content = clean_code(f.read())
                headers.append(f"\n// ===== {path.relative_to(ROOT)} =====\n{content}\n")
    return headers

def main():
    os.makedirs(ROOT / "bin", exist_ok=True)
    headers = gather_headers(SRC_DIRS)
    with open(MAIN_FILE, "r", encoding="utf-8") as f:
        main_code = clean_code(f.read())

    combined = [
        "// ==============================================",
        "// Auto-generated single-file C++ source",
        "// Generated by run_generate_and_copy.py",
        "// ==============================================\n",
        *headers,
        "\n// ===== main.cpp =====\n",
        main_code,
        "\n// ==============================================\n"
    ]

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(combined))

    print(f"âœ… Generated {OUTPUT_FILE.relative_to(ROOT)}")

if __name__ == "__main__":
    main()